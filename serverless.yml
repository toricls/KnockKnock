service: upload-lambda
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage} # default stage is dev, otherwise use specified stage
  profile: ${self:custom.secrets.AWS_PROFILE}   # get aws profile from secrets file
  role: ${self:custom.secrets.ROLE_ARN}         # get role from secrets file
  deploymentBucket:
    name: serverlessconf-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.s3ImageBucketName}/*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.s3Mp3BucketName}/*"
custom:
  s3ImageBucketName: knock-knock-image-store-${self:provider.stage}
  s3Mp3BucketName: knock-knock-mp3-store-${self:provider.stage}
  secrets: ${file(serverless.env.yml):${self:provider.stage}}
  defaultStage: dev
functions:
  sound-lambda:
    handler: index.sound
    name: sound-lambda-${self:provider.stage}
    description: Triggers sound
    runtime: nodejs6.10
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: sound
          method: post
          cors: true
    # environment:
    #   ENV: ${self:custom.secrets.ENV}
  upload-lambda:
    handler: index.upload
    name: upload-lambda-${self:provider.stage}
    description: Uploading images to an S3 bucket
    runtime: nodejs6.10
    memorySize: 128
    timeout: 30
    environment:
      BUCKET_NAME: ${self:custom.s3ImageBucketName}
    events:
      - http:
          path: requestUploadURL
          method: post
          cors: true
  polly-lambda:
    handler: index.polly
    name: polly-lambda-${self:provider.stage}
    description: Convert text to mp3 and upload it to S3
    runtime: nodejs6.10
    memorySize: 128
    timeout: 60
    environment:
      BUCKET_NAME: ${self:custom.s3Mp3BucketName}
    events:
      - http:
          path: mp3
          method: post
          cors: true

  detect-lambda:
    handler: index.detect
    name: detect-lambda-${self:provider.stage}
    description: Detect faces in uploaded S3 files, and calls endpoints
    runtime: python2.7
    memorySize: 128
    timeout: 60
    environment:
      RPI_URL: http://5250784c.ngrok.io
      SLACK_ENDPOINT: https://hooks.slack.com/services/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
    # environment:
    #   BUCKET_NAME: ${self:custom.s3Mp3BucketName}
    # events:
    #   - http:
    #       path: mp3
    #       method: post
    #       cors: true

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3ImageBucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
    Mp3UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Mp3BucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
